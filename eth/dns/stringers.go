// Code generated by "stringer" command for the types within this file; DO NOT EDIT.
// and then joined together to keep directory clean. The functions have also been modified to avoid heap allocations.
// - //go:generate stringer -type=Class -trimprefix=Class -output=string_class.go
// - //go:generate stringer -type=Type -trimprefix=Type -output=string_type.go
// - //go:generate stringer -type=OpCode -trimprefix=OpCode -output=string_opcode.go
package dns

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClassINET-1]
	_ = x[ClassCSNET-2]
	_ = x[ClassCHAOS-3]
	_ = x[ClassHESIOD-4]
	_ = x[ClassANY-255]
}

const (
	_Class_name_0 = "INETCSNETCHAOSHESIOD"
	_Class_name_1 = "ANY"
)

var (
	_Class_index_0 = [...]uint8{0, 4, 9, 14, 20}
)

func (i Class) String() string {
	switch {
	case 1 <= i && i <= 4:
		i -= 1
		return _Class_name_0[_Class_index_0[i]:_Class_index_0[i+1]]
	case i == 255:
		return _Class_name_1
	default:
		return "<unknown dns.Class>"
	}
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeA-1]
	_ = x[TypeNS-2]
	_ = x[TypeCNAME-5]
	_ = x[TypeSOA-6]
	_ = x[TypePTR-12]
	_ = x[TypeMX-15]
	_ = x[TypeTXT-16]
	_ = x[TypeAAAA-28]
	_ = x[TypeSRV-33]
	_ = x[TypeOPT-41]
	_ = x[TypeWKS-11]
	_ = x[TypeHINFO-13]
	_ = x[TypeMINFO-14]
	_ = x[TypeAXFR-252]
	_ = x[TypeALL-255]
}

const (
	_Type_name_0 = "ANS"
	_Type_name_1 = "CNAMESOA"
	_Type_name_2 = "WKSPTRHINFOMINFOMXTXT"
	_Type_name_3 = "AAAA"
	_Type_name_4 = "SRV"
	_Type_name_5 = "OPT"
	_Type_name_6 = "AXFR"
	_Type_name_7 = "ALL"
)

var (
	_Type_index_0 = [...]uint8{0, 1, 3}
	_Type_index_1 = [...]uint8{0, 5, 8}
	_Type_index_2 = [...]uint8{0, 3, 6, 11, 16, 18, 21}
)

func (i Type) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _Type_name_0[_Type_index_0[i]:_Type_index_0[i+1]]
	case 5 <= i && i <= 6:
		i -= 5
		return _Type_name_1[_Type_index_1[i]:_Type_index_1[i+1]]
	case 11 <= i && i <= 16:
		i -= 11
		return _Type_name_2[_Type_index_2[i]:_Type_index_2[i+1]]
	case i == 28:
		return _Type_name_3
	case i == 33:
		return _Type_name_4
	case i == 41:
		return _Type_name_5
	case i == 252:
		return _Type_name_6
	case i == 255:
		return _Type_name_7
	default:
		return "<unknown dns.Type>"
	}
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpCodeQuery-0]
	_ = x[OpCodeInverseQuery-1]
	_ = x[OpCodeStatus-2]
}

const _OpCode_name = "QueryInverseQueryStatus"

var _OpCode_index = [...]uint8{0, 5, 17, 23}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "<unknown dns.OpCode>"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
